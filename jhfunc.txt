modicon图标 128*128
物品栏图标 64*64
建筑蓝图标 96*96 （图片别在中间，靠右一点）
[img]在steam里右键然后点复制链接[/img] steam说明里添加图片

scml的文件名对应着Build，动画合集名(entity)对应着bank，每一个动画名对应着Animation。
另外，每一个文件夹的名字对应着一个symbol。不过这只是完全用spriter制作的动画才会如此，
官方的动画不使用spriter进行制作，所以往往有着独特的symbol名，这就需要到游戏的代码中
去查询了。

常见代码
local inst = CreateEntity()  -- 创建实体
local trans = inst.entity:AddTransform()  -- 创建变化对象
local anim = inst.entity:AddAnimState()  -- 创建动画对象
local sound = inst.entity:AddSoundEmitter()  -- 创建声音对象
local light = inst.entity:AddLight()  -- 创建光源对象

生产prefab的函数，一般是返回的这个
Prefab(prefab_name, entity_fn, assets, prefabs)

设置角度
inst.Transform:SetRotation(rot)

获取角度
inst.Transform:GetRotation(rot)

添加子类，子类会跟随
inst:AddChild(child)

设置与什么物理碰撞
inst.physics:CollidesWith(COLLISION.XXX)

设置自己为什么物理
inst.physics:SetCollisionGroup(COLLISION.XXX)

是否在水上
inst:GetIsOnWater()

是否在地上
inst:GetIsOnLand()

在可以到达的位置（DST）
inst:IsOnPassablePoint()

从屏幕上消失
inst:RemoveFormScene()

重返屏幕
inst:ReturnToScene()

不被保存
inst.persists = false

设置动画层级（高的比低的先显示）
inst.AnimState:SetLayer()  -- prefab默认的layer为3

设置动画排序顺序（同层级时，高的比低的先显示）
inst.AnimState:SetSortOrder()

是否专属服务器
TheNet:IsDedicated()

设置装备之后加速
inst.components.equippable.walkspeedmult = rate  -- rate是加速百分之几，0就是不加速

设置装备防毒气
inst.components.equippable.poisongasblocker = true

设置堆叠上限
inst.components.stackable.maxsize = TUNING.STACK_SIZE_SMALLITEM

设置物品治愈血量
inst.components.healer:SetHealthAmount(TUNING.HEALING_MEDLARGE)

设置饥饿速率
inst.components.hunger.burnrate = rate  -- 正常是1
inst.components.hunger:AddBurnRateModifier(playername, rate)  -- 添加playername的rate
inst.components.hunger:RemoveBurnRateModifier(playername)  -- 移除playername的rate
inst.components.hunger:SetOverrideStarveFn(fn)
  fn(inst, dt) 默认是扣血

设置回血速度
inst.components.health:StartRegen(delta, time)

添加物品的各种属性
inst:AddComponent(char attribute)

设置物品属性
inst.components.XXX.XXX

设置防具血量和吸收伤害的率
inst.components.armor:InitCondition(health, rate)

设置装上后回复理智
inst.components.equippable.dapperness = TUNING.DAPPERNESS_SMALL

data/script/tuning.lua里面可以查看各种tuning的默认值

修改冰箱内的腐烂减缓程度
script/tuning 里面修改 PERISH_FRIDGE_MULT = .5

建造栏配方所在文件
scripts/recipes

创建对象，使之在建造栏里可用
Recipe(name, 
  ingredients,
  recipetab,
  tech,
  gametype, placer,  -- 这部分是可以放置的建筑需要的
  nil, nil, nil, true, 4 -- 这部分是建在海上的建筑需要的
)
通过修该atlas属性可以设置建造栏里的图片
生命值/san值作为材料
decrease_health
decrease_sanity

TECH.NONE 表示不需要科技也可以建造
SCIENCE_ONE 一本
SCIENCE_TWO 二本
MAGIC_TWO 帽子兔子木板
MAGIC_THREE 三相
LOST 需要蓝图解锁

建在栏各类：WAR武器，DRESS衣服，LIGHT照明，STRUCTURES建筑，
FARM农场，SURVIVAL生存，TOOLS工具，SCIENCE科技，MAGIC魔法，
REFINE精炼，NAUTICAL航海，

帽子发光
1. 在帽子里加上这个
{
        local light = inst.entity:AddLight()
        light:SetFalloff(0.4)  -- 向外辐射时的衰减速度，衰减越小辐射越广
        light:SetIntensity(.7)  -- 亮度
        light:SetRadius(2.5)  -- 范围
        light:SetColour(180/255, 195/255, 150/255)  -- 色泽
        light:Enable(false)  -- 发光可用
}
2. 在外面写上装备和卸下的函数
{
local function hat_equip(inst, owner)
      onequip(inst, owner)  -- 这个一定要写上，这是戴帽子的其他效果
      inst.Light:Enable(true)
end

local function hat_unequip(inst, owner)
      onunequip(inst, owner)
      inst.Light:Enable(false)
end
}
3.最后在帽子里绑定装备和卸载时调用的函数       
inst.components.equippable:SetOnEquip( hat_equip )
inst.components.equippable:SetOnUnequip( hat_unequip )

添加防具效果
inst:AddComponent("armor")
设置防具属性
inst.components.armor:InitCondition(防具血量, 防具伤害吸收率)

添加召唤者属性
inst:AddComponent("spawner")
设置召唤者属性
inst.components.spawner:Configure(召唤物, 重生时间)
设置召唤者被占用时的函数
inst.components.spawner.onoccupied = function
	参数inst, child
设置召唤者空出时的函数
inst.components.spawner.onvacate = function
	参数inst, child

添加玩家接近属性
inst:AddComponent("playerprox")
设置玩家接近时的函数
inst.components.playerprox:SetOnPlayerNear(function)
	参数inst
设置玩家远离时的函数
inst.components.playerprox:SetOnPlayerFar(function)
	参数inst

添加容器属性
inst:AddComponent("container")
设置容器内一格只能放一个物品
inst.components.container.acceptsstacks = false
容器设置1个格子可以设为1.1

装备栏位置
EQUIPSLOTS.BODY
EQUIPSLOTS.HEAD
EQUIPSLOTS.HANDS

GetWorld()等函数在simutil文件里

GetWorld()获取world这个prefab

检查是否白天
GetClock():IsDay()

检查是否在地洞
GetWorld():IsCave()

获取季节字符
GetSeasonManager():GetSeasonString()
 spring, 春季
 summer, 夏季
 autumn, 秋季
 winter, 冬季 
 mild, 温和季
 wet, 风季
 green, 雨季
 dry, 干季
 temperate, 温和季
 lush, 繁茂季
 humid, 潮湿季
 aporkalypse, 毁灭季

owner.AnimState:OverrideSymbol("", build, bank)
build是build名，bank是bank名

替换法加载物品皮肤mod的图片动画
assets里面要进行相应的替换
setBuild("皮肤名")
owner.AnimState:OverrideSymbol("xx","皮肤名","xx")，
inventoryitem.imagename = "皮肤名.tex"
inventoryitem.atlasname = "images/inventoryimages/皮肤名.xml"
更多详情看皮肤mod的dsskins.lua里面

添加地图上的贴图
首先在modmain的assets里加载你的图片(xml和tex)，
然后再写AddMinimapAtlas("图片位置.xml")
接着在你的实物里写上
inst.entity:AddMiniMapEntity()
inst.MiniMapEntity:SetIcon( "图片位置.tex" )
就可以了

物品栏添加物品
GetPlayer().components.inventory:GiveItem( prefab )
获取装备栏里的物品
inst.components.inventory:GetEquippedItem(eslot)

检查物品栏里某物品是否有足够数量
GetPlayer().components.inventory:Has(prefab, number)

添加可堆叠属性
inst:AddComponent("stackable")
inst.components.stackable.maxsize = number

添加有限次使用属性
inst:AddComponent("finiteuses")
设置最大使用次数
inst.components.finiteuses:SetMaxUses(TUNING.TENT_USES)
设置生成时拥有的使用次数
inst.components.finiteuses:SetUses(TUNING.TENT_USES)
设置使用完后触发的函数
inst.components.finiteuses:SetOnFinished( onfinished )
消耗使用次数
inst.components.finiteuses:Use()

设置角色专属
inst:AddComponent("characterspecific")
inst.components.characterspecific:SetOwner(charater)

保存和加载
inst.OnSave =  function  -- 参数inst, data
inst.OnLoad = function  -- 参数inst, data
inst.OnPreLoad = function  -- 参数inst, data

多少时间后执行
inst:DoTaskInTime(time, function)

执行周期任务
inst:DoPeriodicTask(time, function, delay)

执行bank动画
inst.AnimState:PlayAnimation(animation, bool)
  bool表示是否循环，默认false

在前一个动画执行完之后再执行bank动画
inst.AnimState:PushAnimation(animation, bool)
  bool表示是否循环，默认true

特效fx都在scripts/fx.lua里有记录

播放音效
inst.SoundEmitter:PlaySound(sound)

召唤生物
local pb = SpawnPrefab(prefab)
local pt = Vector(inst.Transform:GetWorldPosition())  -- 获取当前物体位置
pb.Transform:SetPosition(pt:Get())  -- 设置完位置才能真正召唤出来

获取玩家对象
GetPlayer()

设置冲击波属性
inst:AddComponent("groundpounder")
inst.components.groundpounder.destroyer = true
inst.components.groundpounder.damageRings = 2
inst.components.groundpounder.destructionRings = 3
inst.components.groundpounder.numRings = 3

inst:AddComponent("combat")
inst.components.combat.defaultdamage = 100
inst.components.combat.notags = {'player'}
调用

设置角色伤害倍率
inst.components.combat:AddDamageModifier(player_name, rate)
inst.components.combat:RemoveDamageModifier(player_name, rate)  -- 移除倍率

获取mod的设置属性
GetModConfigData(name)
只能再modmain里调用

添加标签
inst:AddTag(tag)

检查拥有标签
inst:HasTag(tag)

添加函数进物体
AddPrefabPostInit(prefab, function)
prefab, 要生成的对象
function，相关函数，这个函数可以传入inst参数

设置物品躺在地上显示
inst.AnimState:SetOrientation( ANIM_ORIENTATION.OnGround )

设置anim动图的比例
inst.Transform:SetScale(scale, scale, scale)

设置物品可用于交易
inst:AddComponent("tradable")

设置物品交易属性的金子价值
inst.components.tradable.goldvalue = value

设置物体成为交易者（可被给予具有交易属性的物品）
inst:AddComponent("trader")
设置交易者接受那些物品
inst.components.trader:SetAcceptTest(function(inst, item) [code] end)
  -- item是被给予的物品，函数返回true就表示可交易
设置交易者接受或拒绝时触发的函数
inst.components.trader.onaccept = function
inst.components.trader.onrefuse = function
  -- 这两个函数在定义时有三个参数inst, giver(给予者), item(给予品)

设置火山祭献物品
inst:AddComponent("appeasement")
inst.components.appeasement.appeasementvalue = value

添加掉落物（战利品）属性
inst:AddComponent("lootdropper")
设置战利品掉落随机列表
inst.components.lootdropper:SetRandomLoot({})
添加物品到战利品掉落随机列表
inst.components.lootdropper:AddRandomLoot("xxx", 1)
设置几个掉落随机战利品
inst.components.lootdropper.numrandomloot = 1

添加冷却属性
inst:AddComponent("cooldown")
设置冷却时间
inst.components.cooldown.cooldown_duration = time

以下方法可以直接让人物拥有砍树能力，但还需要改变鼠标和键盘触发的属性
inst:AddComponent("worker")
inst.components.worker:SetAction(ACTIONS.CHOP, 1)

SeasonManager是个组件

调用预存的动作
inst:PerformBufferedAction()

清除预存的动作
inst:ClearBufferedAction()

获取预存的动作
inst:GetBufferedAction()

检查是否保存在哪里
SaveGameIndex:IsModeSurvival() -- 在rog
SaveGameIndex:IsModeShipwrecked()  -- 在SW
SaveGameIndex:IsModePorkland()  -- 在HAM

检查是否兼容DLC
GLOBAL.IsDLCEnabled(num)  -- num为1，2，3

人物说话
GetPlayer().components.talker:Say(string)

设置人物被雷击后的函数
inst.components.playerlightningtarget:SetOnStrikeFn(function)

MakeSmallBurnable等函数在standardcomponents文件里

显示效果
inst.AnimState:OverrideSymbol(symboltooverride, build, symbol)
symboltooverride 与scml打包之前图片文件夹有关
build 与物品动画有关
symbol 与物品类型有关

戴帽子显示效果
owner.AnimState:OverrideSymbol("swap_hat", build, "swap_hat")
显示：HAT, HAIR_HAT; HEAD_HAIR (player)  [卸下帽子与之相反]
隐藏：HAIR_NOHAT, HAIR; HEAD, HAIRFRONT (player) [卸下帽子与之相反]
开放头部显示: HAT, HAIR_NOHAT, HAIR, HAIRFRONT, HEAD
开放头部隐藏: HAIR_HAT, HEAD_HAIR

手持装备显示效果
owner.AnimState:OverrideSymbol("swap_object", build, "swap_object") [非提灯]
（提灯类较为复杂，自行查看）
显示: ARM_carry [卸下装备与之相反]
隐藏: ARM_normal [卸下装备与之相反]

衣服显示效果
owner.AnimState:OverrideSymbol("swap_body", build, "swap_body") [身体部分]
owner.AnimState:OverrideSymbol("swap_body", build, "backpack") [背包部分]
owner.AnimState:ClearOverrideSymbol("swap_body") [卸下身体部分]
owner.AnimState:ClearOverrideSymbol("backpack") [卸下背包部分]

船帆显示效果
ship.AnimState:OverrideSymbol("swap_sail", build, "swap_sail")
ship.AnimState:OverrideSymbol("swap_propeller", build, "swap_propeller") [螺旋桨类]
ship.AnimState:ClearOverrideSymbol("swap_sail") [卸下]
ship.AnimState:ClearOverrideSymbol("swap_propeller") [卸下]

船灯显示效果
ship.AnimState:OverrideSymbol("swap_lantern", build, "swap_lantern") [有光圈]
ship.AnimState:OverrideSymbol("swap_lantern", build, "swap_lantern_off") [无光圈]
有无光圈两种在scml里要做出来
ship.AnimState:OverrideSymbol("swap_lantern", build, "swap_cannon") [船炮]
ship.AnimState:ClearOverrideSymbol("swap_lantern") [卸下]

ROG里世界外的地皮
GROUND.IMPASSABLE

寻找实体
TheSim:FindEntities(x, y, z, range, tags, no_tags)
ex: tags={"wall"}
ex: no_tags = {"fx"}
寻找单个实体
FindEntity(inst, range, fn, tags, no_tags)
    fn(item, inst) 检测是否符合，返回true表示符合，inst即为上面的inst

墙体动画和血量百分比
0 broken
0.4 onequarter
0.5 half
0.99 threequarter
1 fullA, fullB, fullC

检查是否兼容DLC，modmain里也可用
GLOBAL.IsDLCEnabled(GLOBAL.REGIN_OF_GIANTS)  -- 兼容ROG
GLOBAL.IsDLCEnabled(GLOBAL.CAPY_DLC)  -- 兼容SW
GLOBAL.IsDLCEnabled(GLOBAL.PORKLAND_DLC)  -- 兼容HAM

可进入物品栏的物品水中动画添加（第三个参数是原本的动画）
MakeInventoryFloatable(inst, "idle_water", "idle")

添加子实体
inst:AddChild(child)

移除子实体
inst:RemoveChild(child)

饥荒中所有的实体都被记录在Ents表里

农场里长出来的是plant_normal实物，由crop组件属性

获取计时
GetTime() 每次进入游戏后都会重新计时

超好用的一键GOLBAL
local function GlobalUsingMetatable()
	GLOBAL.setmetatable(env, {__index = function(t, k)
		return GLOBAL.rawget(GLOBAL, k)
	end,})
end
GlobalUsingMetatable()

获取函数体内的临时函数，强
local function flc_Get(fn,name,maxlevel,max,level,file)
	if type(fn) ~= "function" then
		return
	end
	local maxlevel = maxlevel or 5
	local level = level or 0
	local max = max or 20
	for i=1,max,1 do
		local upname,upvalue = debug.getupvalue(fn,i)
		if upname and upname == name then
			if file and type(file) == "string" then
				local fninfo = debug.getinfo(fn)
				if fninfo.source and fninfo.source:match(file) then
					return upvalue
				end
			else
				return upvalue
			end
		end
		if level < maxlevel and upvalue and type(upvalue) == "function" then
			local upupvalue = flc_Get(upvalue,name,maxlevel,max,level+1,file)
			if upupvalue then
				return upupvalue
			end
		end
	end
end

获取其他mod是否加载
GLOBAL.KnownModIndex:IsModEnabled("workshop-xxx")

获取世界中的实物，控制台代码的使用
c_find("prefab_name")  （在modmain里要加GLOBAL）

简化STRINGS部分
local names = STRINGS.NAMES
local desc = STRINGS.RECIPE_DESC
local generic = STRINGS.CHARACTERS.GENERIC.DESCRIBE

自定义组件
local NewComponent = Class(function(self, inst)
    self.inst = inst

    self.attr = xx
)
function NewComponent:Func()
    return self.inst
end
return NewComponent

自定义界面
先导入一波所需的组件
local my_screen = Class(Screen, function(self)
  Screen._ctor(self, "name")
  TheFrontEnd:PopScreen(self)
end)
其他地方
local my_sc = require "screen/my_screen"
TheFrontEnd:PushScreen(my_sc())

如果用一个按键按下控制图形界面出现，
再用这个案件弹起控制图形界面小时，
就能够让界面按下时才出现。

添加按键控制
TheInput:AddKeyUpHandler(key, fn)  key弹起触发函数fn（fn无参数）
TheInput:IsKeyDown(key)  key是否被按下

相当于将file文件中的代码移到modmain中
modimport("file")

在初始化前将fn添加进一个XX中
AddSimPostInit(fn)
AddPrefabPostInit("prefab", fn)
AddTaskPreInit("task", fn)

世界上一些固定或随机实物的生成是与task任务相关的
要想在世界上固定或随机生成一些实物，需要先创建room，
然后再在向task的room_choices表添加这个room属性，
并将值设为1

关于RPC
local function GrowGiant(player)    
    player.Transform:SetScale(2,2,2)
end
AddModRPCHandler(modname, RPCname, GrowGiant)--添加RPC处理器，
这个语句可以写在任何会被主机执行到的地方。三个参数，第一个为命名空间
的名字，建议写mod的名字；第二个参数为RPC的名字，必须是唯一的，如果
有同名的，就会根据先后顺序，被后面的覆盖。这两个参数都必须是字符串。
第三个参数则是要执行的函数，这个函数的第一个参数固定为玩家的引用，这
里的玩家，指的是执行下面的Send

local function SendGrowGiantRPC()   
    SendModRPCToServer(MOD_RPC[modname]["RPCname"])
    --[[向主机发送RPC消息，第一个参数为MOD_RPC[modname]["RPCname"]，
    MOD_RPC是不能修改的，后面的modname,RPCname就和上面的意思是一样
    的。另外，这个函数可以传入更多的参数，只要写在第一个参数后面就行。这
    些参数讲会被上面的AddModRPCHandler里的执行函数接收到。在某些时候
    会非常有用。
end

关于netvar
inst._level = net_smallbyte(inst.GUID,"MyLevel","leveldirty")
inst:ListenForEvent("leveldirty", function(inst)
    if inst._level:value() == 1 then 
    end
end)
netvar:set(x)--只能在主机端调用这个函数，会自动同步客机的数据（在一个新的
同步周期开始时）。如果这个函数确实改变了netvar的值，会在主机和客机上都
触发相应的dirty事件。
netvar:value()--可以在主机和客机上调用这个函数，读取当前网络变量的值。
netvar:set_local(x)--可以在主机或客机上调用，改变相应的值但不触发数据同步
或dirty事件。但当主机下一次调用set函数时，无论变量的值是否发生了改变，
都会同步一次数据。

添加动作：共三步
1.添加动作
AddAction(action)
local MY_EAT = Action({
  priority=0,  优先级 
  instant=false，是否不走到target位置，默认为false，也就是要走过去
})  -- 和你要仿的动作一样
MY_EAT.id = "MY_EAT"
MY_EAT.str = "MY_EAT"
MY_EAT.fn = functin(act) end
2.绑定组件（联机）
local type = "SCENE" -- 设置动作绑定的类型
local component = "workable" -- 设置动作绑定的组件
local testfn = function(inst, doer, actions, right) -- 设置动作的检测函数，如果满足条件，就向人物的动作可执行表中加入某个动作。right表示是否是右键动作。
    if inst:HasTag("CHOP_workable") and doer:HasTag("player") then
        table.insert(actions, ACTIONS.PUNCHTREE)
    end
end
AddComponentAction(type, component, testfn)
单机在组件里写有:
屏幕中的动作
CollectSceneActions(doer, actions, right)  -- right是否右键
物品栏里的动作
CollectInventoryActions(doer, acitons, right)
鼠标移到对象上的动作
CollectUseActions(doer, target, actions, right)
3.绑定state
local state = "doshortaction" -- 设定要绑定的state
AddStategraphActionHandler("wilson",
  ActionHandler(ACTIONS.PUNCHTREE, state)
)

SCENE 在屏幕中点击组件拥有者
USEITEM 带着组件拥有者物品的鼠标点击目标

联机的组件绑定动作在componentactions里面

BufferedAction(doer, target, action, invobj, pos) 
target参数会让doer走到target的位置去

添加state到SG
AddStategraphState(sg, state)

添加任务
AddTask(string task_name, table task_table)

添加材料属性
AddIngredientValues(names, tags, cancook, candry)

标签
建造时不会被阻挡的标签："fx" "player" "NOBLOCK"

获取监听事件的函数
inst.event_listener["onbuilt"][inst][1]

监听事件
inst:ListenForEvent(event, fn, listener)
  event 监听的事件
  fn(inst, data) 事件推出时触发的函数
  listener 可选，改为由listener来监听

人物animation
build_loop 人物建造或收获时的动作
dial_loop 人物说话时的动作

事件字符
onbuilt  建造
entity_death 生物死亡
attacked 攻击
dusktime 黄昏来临
daytime 白昼来临
nighttime 黑夜来临
animqueueover 动画队列执行完毕
animover 动画执行完毕

room注释
PigKingdom 猪王村
Graveyard 坟场
Clearing 蘑菇环（眼骨，传送零件）

level注释
AddLevel里overrides = {  -- 三箱开局的设置
  {"start_setpeice", "DefaultPlusStart"},	
  -- 设置开始部件，是个layout
  {"start_node", {"DeepForest", "Forest", "SpiderForest", "Plain", "Rocky", "Marsh"}},
  -- 开始节点设置，正常模式是Clearing，不知道有啥用
  {"boons", "often"},	
  -- 相当于在设置里面修改东西的参数			
  {"spiders", "often"},
  {"berrybush", "rare"},
  {"carrot", "rare"},
  {"rabbits", "rare"},
}

深度遍历
local function pre_print(n, ...)
	if n <= 0 then
		print(...)
	else
		local pre = ""
		for i = 1, n-1 do
			pre = pre.."\t"
		end
		print(pre, ...)
	end
end

local loaded = {}
local function traverse(tbl, n)
	loaded[tbl] = true
	n = n or 0
	for k, v in pairs(tbl) do
		if type(v) == "table" and not loaded[v] then
			pre_print(n, k)
			traverse(v, n+1)
		else
			pre_print(n, k, v)
		end
	end
end

waterproofer 防水材料
inherent 固有的
insulator 绝缘(闪电)
insulation 隔离（隔离寒冷），insulation（隔离炎热）
temperature 温度
perish 腐烂
inventory 库存（物品栏内）
transform 转换
entity 实体
stackable 可堆叠
inspectable 可检查
inventoryitem 库存项目
healer 治愈者
container 容器
structure 建筑物
slot 槽
loot 战利品
lootdropper 抢劫者 （掉落一半材料用的）
skull 头骨
ruins 遗迹
metal 金属
symbol 符号，标志
override 覆盖
drapper 衣冠楚楚的
perish 腐烂
fridge 电冰箱
falloff 衰减
intensity 亮度
absorption 吸收
depleted 耗尽的
torch 火把
fader 增益调节器（光亮）
flicker 闪烁，闪光，摇曳
fade in 淡入，渐显
envelope 信封，包膜
ison， Is On
ingredient 原料，材料
spoil 腐烂，变坏
swap 交换
sharp 锋利的
finite 有限的
uses 用途，应用
tradable 可贸易的，可交易的
interact 互动
collapse 倒塌
obstacle 障碍物
extinguish 熄灭
combat 战斗
dist [abbr] 距离
nearest 最近的
simulate 模仿，假装，冒充
stomp 跺脚，重踩，践踏
groundpounders 踏地靴
degrees 角度
terraformer 地形改造器
tile 瓷砖，瓦片
coords 坐标显示，坐标
original 原来的
projectile 抛物线的
orientation 方向，定位
crop 农作物
decor [n] 装饰
propagator 传播者
animover = anim over
moisture 水分，湿度
haunt 作祟
redirect 重定向，再直接询问
invincible 无敌
valid 有效的
deploy 部署，展开
impassable 不能通行的
narrow 狭窄的
prototyper 原型机
proximity 接近，亲近
collapse_small 小烟雾
persist 存留，保持
barren 贫瘠的
withered 枯萎的
deciduous 落叶性的
stump 树桩
shelter 庇护所
tentacle 触手
consumption 消耗
statue_transition 暗影特效1
statue_transition2 暗影特效2
periodic 周期性的 
amphibious 两栖的
aura 光环
prey 猎物
irreplaceable 不可代替的
parameter 参数
intensity 亮度，强度
immue 免疫
interior 内部
limbo 处于中间的或不定的状态
ignite 点燃
feather_thunder 雷鸟羽毛
lotus_flower 睡莲
beewax 蜂蜡
hibbernate 冬眠
held 握住
alloy 合金
hippo_antler 河鹿角
charged 带电的，填充
duration 持续时间
smelter 熔炉，冶金厂
melter 冶炼器
flood 淹没
stewer 煮，炖
fur 皮毛
furnace 火炉
sheat 保护层
decay 衰退
unique 独特的
unsaddle 卸马鞍
paddle 划桨
bucked 被牛摔下
boomerang 回旋镖
blowdart 吹吹箭
abandon 离开，遗弃
creepy 诡异的
reject 拒绝
oink 呼噜声
oinc 1元呼噜币
oinc10 10元
oinc100 100元
thumper 重击器
telipad 传送平台
occupied 已占用的
vacate 空出
configure 配置，安装
record 记录
telipad 转送平台
interior 内部的
panic 恐慌
wander 徘徊
dry 烘干机
attempt 企图
pend 悬而未决，推迟
tick 标记号
hibernate 冬眠
wrangle 争论，争吵
regisry 注册
trace 跟踪
instance 实例
interval 区间
disease 病变的
aquatic 水生的
rainforesttree 雨林树
clawplamtree 棕榈爪树
teatree 茶树
cork 软木
fertile 富饶的
bait 诱饵
herd 兽群
mood 情绪，心情
domesticat 驯养
feral 野生的
mount 爬上
threshold 阈值
boost 推进
blunderbuss 喇叭枪
ammo 弹药
cached 缓存
combine 使联合
spellcaster 施法者
reticule 刻度板
validate 验证
inedible 不能吃点
gel 凝胶
populate 布局到库中
stall 车位
profile 轮廓
friction 摩擦力
appeasement 缓和
fuse 雷管，导火线
explosive 爆炸性的
particle 粒子
emitter 发射器
quantity 数量
hostile 敌对的
definition 清晰度，解说
interior 内部的
perspective 视图
reverb 混响
destnation 目的地
cc ColourCube